" ~/.vimrc
"
" To use this file, you'll have to set up neobundle:
"
"   $ mkdir -p ~/.vim/bundle
"   $ git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim
"   $ vim +NeoBundleInstall +qall
"
" If you're using YouCompleteMe, you'll also need to run
"
"   $ cd ~/.vim/bundle/YouCompleteMe/
"   $ git submodule update --init --recursive
"   $ ./install.py --clang-completer
"

" Change the mapleader from \ to ,
let mapleader=","

" Decide which autocomplete/snippets engine to load {{{
"
" Unfortunately some plugins conflict with each other, so we set up
" a few flags to load those plugins conditionally.
"
" To use AutoComplPop:      let g:ludwig_load_acp = 1
" To use clang_complete:    let g:ludwig_load_clangcomplete = 1
" To use neocomplcache:     let g:ludwig_load_neocomplcache = 1
" To use neocomplete:       let g:ludwig_load_neocomplete = 1
" To use YouCompleteMe:     let g:ludwig_load_ycm = 1
"
" Don't load all the engines all at once, since there are conflicts.
" By default, we use clang_complete.
let g:ludwig_load_clangcomplete = 1
" }}}

" We can initialize settings (flags, paths, etc.) in a preload.vim script
if filereadable(expand('~/.vim/preload.vim'))
    source ~/.vim/preload.vim
endif

" Set up NeoBundle. {{{
" 
" Brief help
"   :NeoBundleList          - list configured bundles
"   :NeoBundleInstall(!)    - install bundles
"   :NeoBundleUpdate(!)     - update bundles
"   :NeoBundleClean         - removes unused bundles from the filesystem
"
" For more details see ':h neobundle'
" See also https://github.com/Shougo/neobundle.vim
"

" Initialize neobundle.vim {{{

" Skip initialization for vim-tiny or vim-small
if !1 | finish | endif

if has('vim_starting')
    " Use Vim (disable the vi-compatible stuff)
    set nocompatible
    " Required!
    set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required!
call neobundle#begin(expand('~/.vim/bundle/'))

" }}}

" Let NeoBundle manage neobundle.vim (required!)
NeoBundleFetch 'Shougo/neobundle.vim'

" Use neobundle standard recipes
NeoBundle 'Shougo/neobundle-vim-recipes'

" Load my favorite bundles
" --- Navigation {{{
" a.vim - alternate files quickly {{{
" http://www.vim.org/scripts/script.php?script_id=31
NeoBundle 'a.vim'
" }}}
" bufexplorer.zip - Buffer Explorer / Browser {{{
" http://www.vim.org/scripts/script.php?script_id=42
" https://github.com/vim-scripts/bufexplorer.zip
NeoBundle 'bufexplorer.zip'
" }}}
" Command-T - Fast file navigation for vim {{{
" http://www.vim.org/scripts/script.php?script_id=3025
" https://github.com/wincent/Command-T
" http://git.wincent.com/command-t.git
" https://github.com/Shougo/neobundle.vim/issues/78
"NeoBundle 'wincent/Command-T'
NeoBundle 'wincent/command-t', {
    \   'build' : {
    \       'mac' : 'sh -c "cd ruby/command-t && ruby extconf.rb && make"'
    \   }
    \ }
" }}}
" ctrlp.vim - Fuzzy file, buffer, mru, tag, ... finder with regexp support {{{
" http://www.vim.org/scripts/script.php?script_id=3736
" https://github.com/kien/ctrlp.vim
NeoBundle 'kien/ctrlp.vim'
" }}}
" EasyMotion - Vim motions on speed! {{{
" http://www.vim.org/scripts/script.php?script_id=3526
" https://github.com/Lokaltog/vim-easymotion
NeoBundle 'Lokaltog/vim-easymotion'
" }}}
" LustyJuggler - Switch very quickly among your active buffers {{{
" Launch with '<Leader>lj'
" http://www.vim.org/scripts/script.php?script_id=2050
" https://github.com/sjbach/lusty
" https://github.com/vim-scripts/LustyJuggler
" https://github.com/mutewinter/LustyJuggler
NeoBundle 'LustyJuggler'
" }}}
" NERDTree - Tree explorer plugin {{{
" http://www.vim.org/scripts/script.php?script_id=1658
" https://github.com/scrooloose/nerdtree/
NeoBundle 'scrooloose/nerdtree'
" }}}
" matchit.zip - extended % matching for HTML, LaTeX, and many other languages {{{
" http://www.vim.org/scripts/script.php?script_id=39
NeoBundle 'matchit.zip'
" }}}
" mru.vim - manage 'Most Recently Used (MRU)' files {{{
" http://www.vim.org/scripts/script.php?script_id=521
NeoBundle 'mru.vim'
" }}}
" tabman.vim - Tab management for Vim {{{
" https://github.com/kien/tabman.vim
NeoBundle 'kien/tabman.vim'
" }}}
" tagbar - Vim plugin that displays tags in a window, ordered by class etc. {{{
" http://majutsushi.github.com/tagbar/
" http://www.vim.org/scripts/script.php?script_id=3465
" https://github.com/majutsushi/tagbar
NeoBundle 'majutsushi/tagbar'
" }}}
" taglist.vim - Source code browser (supports C, C++, java, python, etc.) {{{
" http://www.vim.org/scripts/script.php?script_id=273
NeoBundle 'taglist.vim'
" }}}
" vim-sneak - The missing motion for Vim {{{
" https://github.com/justinmk/vim-sneak
" http://www.vim.org/scripts/script.php?script_id=4809
NeoBundle 'justinmk/vim-sneak'
" }}}
" ZoomWin - Zoom in/out of windows (toggle between one window and multi-window) {{{
" Use '<C-w>o' to toggle zoom on window
" http://www.vim.org/scripts/script.php?script_id=508
NeoBundle 'ZoomWin'
" }}}
" }}}
" --- UI Additions {{{
" colorv.vim - Easier color handling {{{
" Use with '<Leader>ce'
" http://www.vim.org/scripts/script.php?script_id=3597
" https://github.com/Rykka/colorv.vim
NeoBundle 'Rykka/colorv.vim'
" }}}
" Indent Guides - A plugin for visually displaying indent levels in Vim {{{
" Use '<Leader>ig' to turn on the guides
" http://www.vim.org/scripts/script.php?script_id=3361
" https://github.com/nathanaelkane/vim-indent-guides
" https://github.com/mutewinter/vim-indent-guides
" http://nathanaelkane.imgur.com/indent_guides
"NeoBundle 'nathanaelkane/vim-indent-guides'
" }}}
" lightline.vim - A light and configurable statusline/tabline for Vim {{{
" https://github.com/itchyny/lightline.vim
NeoBundle 'itchyny/lightline.vim'
" }}}
" Powerline - statusline plugin for vim {{{
" https://github.com/Lokaltog/powerline
" https://powerline.readthedocs.org/en/latest/
"NeoBundle 'Lokaltog/powerline'
" }}}
" scratch.vim - plugin to create and use a scratch vim buffer {{{
" http://www.vim.org/scripts/script.php?script_id=664
NeoBundle 'scratch.vim'
" }}}
" vim-togglelist - Functions to toggle the [Location List] and the [Quickfix List] windows {{{
" Use '<Leader>l' to toggle the location list
" Use '<Leader>q' to toggle the quickfix list
" https://github.com/milkypostman/vim-togglelist
NeoBundle 'milkypostman/vim-togglelist'
" }}}
" Yggdroot/indentLine - A vim plugin to display the indention levels with thin vertical lines {{{
" https://github.com/Yggdroot/indentLine
NeoBundle 'Yggdroot/indentLine'
" }}}
" }}}
" --- Commands {{{
" ack.vim - Plugin for the Perl module / CLI script 'ack' {{{
" http://www.vim.org/scripts/script.php?script_id=2572
" https://github.com/mileszs/ack.vim
NeoBundle 'mileszs/ack.vim'
" }}}
" emmet-vim â€” the essential toolkit for web-developers {{{
" http://emmet.io/
" https://github.com/mattn/emmet-vim
NeoBundle 'mattn/emmet-vim'
" }}}
" NERDCommenter - Plugin that allows easy commenting of code {{{
" http://www.vim.org/scripts/script.php?script_id=1218
" https://github.com/scrooloose/nerdcommenter
NeoBundle 'scrooloose/nerdcommenter'
" }}}
" split-manpage.vim - View any man page in a split vim window {{{
" https://github.com/ludwig/split-manpage.vim
NeoBundle 'ludwig/split-manpage.vim', 'master'
" }}}
" surround.vim - quoting/parenthesizing made simple {{{
" http://www.vim.org/scripts/script.php?script_id=1697
" https://github.com/tpope/vim-surround
NeoBundle 'tpope/vim-surround'
" }}}
" repeat.vim - Use the repeat command (.) with supported plugins {{{
" http://www.vim.org/scripts/script.php?script_id=2136
" https://github.com/tpope/vim-repeat
NeoBundle 'tpope/vim-repeat'
" }}}
" }}}
" --- Automatic Helpers {{{
" closetag.vim -- Functions and mappings to close open HTML/XML tags {{{
" http://www.vim.org/scripts/script.php?script_id=13
NeoBundle 'closetag.vim'
" }}}
" MatchTag - MatchParen for HTML tags {{{
" http://www.vim.org/scripts/script.php?script_id=3818
" https://github.com/gregsexton/MatchTag
NeoBundle 'gregsexton/MatchTag'
" }}}
" session.vim - extended session management for vim {{{
" http://www.vim.org/scripts/script.php?script_id=3150
" https://github.com/xolox/vim-session
NeoBundle 'xolox/vim-misc'
NeoBundle 'xolox/vim-session'
" }}}
" fugitive.vim - a git wrapper so awesome, it should be illegal {{{
" http://www.vim.org/scripts/script.php?script_id=2975
" https://github.com/tpope/vim-fugitive
NeoBundle 'tpope/vim-fugitive'
" }}}
" }}}
" --- Language Additions {{{
" cocoa.vim - Plugin for Cocoa/Objective-C development {{{
" http://www.vim.org/scripts/script.php?script_id=2674
" https://github.com/msanders/cocoa.vim
NeoBundle 'msanders/cocoa.vim'
" }}}
" django.vim - Syntax highlighting for Django templates {{{
" http://www.vim.org/scripts/script.php?script_id=1487
" https://github.com/vim-scripts/django.vim
NeoBundle 'vim-scripts/django.vim'
" }}}
" glsl.vim - OpenGL Shading Language (GLSL) Vim syntax highlighting {{{
" https://github.com/beyondmarc/glsl.vim
NeoBundle 'beyondmarc/glsl.vim'
" }}}
" html5.vim - HTML5 omnicomplete and syntax {{{
" http://www.vim.org/scripts/script.php?script_id=3236
" https://github.com/othree/html5.vim
NeoBundle 'othree/html5.vim'
" }}}
" nginx.vim - syntax highlighting for nginx.conf and related files {{{
" http://www.vim.org/scripts/script.php?script_id=1886
" https://github.com/vim-scripts/nginx.vim
" https://github.com/mutewinter/nginx.vim
NeoBundle 'mutewinter/nginx.vim'
" }}}
" salt-vim - syntax for editing Salt state files (.sls) {{{
" https://github.com/saltstack/salt-vim
NeoBundle 'saltstack/salt-vim'
" }}}
" swift.vim - Vim runtime files for Swift {{{
" https://github.com/keith/swift.vim
NeoBundle "keith/swift.vim"
" }}}
" rest.vim - a reStructuredText syntax mode {{{
" http://www.vim.org/scripts/script.php?script_id=973
NeoBundle 'rest.vim'
" }}}
" rust.vim -- Rust file detection and syntax highlighting {{{
" https://github.com/wting/rust.vim
NeoBundle 'wting/rust.vim'
" }}}
" vim-cmake - provide a cmake reference and autocompletion {{{
" https://github.com/jansenm/vim-cmake
NeoBundle 'jansenm/vim-cmake'
" }}}
" vim-coffee-script - CoffeeScript support for vim {{{
" https://github.com/kchmck/vim-coffee-script
NeoBundle 'kchmck/vim-coffee-script'
" }}}
" vim-css3-syntax - Add CSS3 syntax support to vim {{{
" https://github.com/hail2u/vim-css3-syntax
NeoBundle 'hail2u/vim-css3-syntax'
" }}}
" vim-fish -- Vim support for editing fish-shell scripts {{{
" https://github.com/dag/vim-fish
NeoBundle 'dag/vim-fish'
" }}}
" vim-glsl - Vim runtime files for OpenGL Shading Language {{{
" https://github.com/tikhomirov/vim-glsl
NeoBundle 'tikhomirov/vim-glsl'
" }}}
" vim-go -- Go development plugin for Vim {{{
" https://github.com/fatih/vim-go
NeoBundle 'fatih/vim-go'
" }}}
" vim-javascript - Vastly improved javascript indentation {{{
" http://www.vim.org/scripts/script.php?script_id=2765
" https://github.com/pangloss/vim-javascript
NeoBundle 'pangloss/vim-javascript'
" }}}
" vim-json - A better JSON for Vim (elzr/vim-json) {{{
" https://github.com/elzr/vim-json
NeoBundle 'elzr/vim-json'
" }}}
" vim-less - vim syntax for LESS (dynamic CSS) {{{
" https://github.com/groenewege/vim-less
NeoBundle 'groenewege/vim-less'
" }}}
" vim-markdown - Syntax highlighting for Markdown text files {{{
" http://www.vim.org/scripts/script.php?script_id=2882
" https://github.com/hallison/vim-markdown
NeoBundle 'hallison/vim-markdown'
" }}}
" vim-scala -- Vim integration for Scala {{{
" https://github.com/derekwyatt/vim-scala
NeoBundle 'derekwyatt/vim-scala'
" }}}
" vim-erlang-omnicomplete -- Erlang omnicomplete plugin for Vim {{{
"NeoBundle 'vim-erlang/vim-erlang-omnicomplete'
" }}}
" vimerl -- The Erlang plugin for Vim {{{
NeoBundle 'jimenezrick/vimerl'
" }}}
" }}}
" --- Plugins by Shougo Dark Vim Master {{{
" Unite.vim -- search and display information from arbitrary sources {{{
" http://www.vim.org/scripts/script.php?script_id=3396
" https://github.com/Shougo/unite.vim
NeoBundle 'Shougo/unite.vim'
" }}}
" neomru.vim - MRU plugin for unite.vim {{{
" https://github.com/Shougo/neomru.vim
NeoBundle 'Shougo/neomru.vim'
" }}}
" vimproc.vim - Interactive command execution in vim {{{
" https://github.com/Shougo/vimproc.vim
" Needed by vim-marching
NeoBundle 'Shougo/vimproc.vim', {
    \   'build' : {
    \       'windows' : 'tools\\update-dll-mingw',
    \       'cygwin' : 'make -f make_cygwin.mak',
    \       'mac' : 'make -f make_mac.mak',
    \       'linux' : 'make',
    \       'unix' : 'make',
    \   },
    \ }
" }}}
" unite-outline - outline plugin for unite.vim {{{
" https://github.com/h1mesuke/unite-outline
"NeoBundle 'h1mesuke/unite-outline'
" }}}
" }}}
" --- Miscellaneous {{{
" abolish.vim - easily search for, substitute, and abbreviate multiple variants of a word {{{
" https://github.com/tpope/vim-abolish
NeoBundle 'tpope/vim-abolish'
" }}}
" localrc.vim - enable configuration file of each directory {{{
" http://www.vim.org/scripts/script.php?script_id=3393
" https://github.com/thinca/vim-localrc
NeoBundle 'localrc.vim'
" }}}
" webapi.vim - vim interface to Web API {{{
" http://www.vim.org/scripts/script.php?script_id=4019
" https://github.com/mattn/webapi-vim
" (Also used by Rykka/colorv.vim)
NeoBundle 'mattn/webapi-vim'
" }}}
" }}}

" Load the conditional bundles
" --- YouCompleteMe engine {{{
if exists('g:ludwig_load_ycm') && g:ludwig_load_ycm
    " SuperTab - Do all your insert-mode completion with Tab {{{
    " http://www.vim.org/scripts/script.php?script_id=1643
    " https://github.com/ervandew/supertab
    NeoBundle 'ervandew/supertab'
    " }}}
    " UltiSnips - The ultimate snippet solution for Vim {{{
    " https://github.com/SirVer/ultisnips
    NeoBundle 'SirVer/ultisnips'
    NeoBundle 'honza/vim-snippets'
    let s:ludwig_loaded_ultisnips = 1
    " }}}
    " Valloric/YouCompleteMe - A code-completion engine for Vim {{{
    " https://github.com/Valloric/YouCompleteMe
    NeoBundle 'Valloric/YouCompleteMe'
    let s:ludwig_loaded_ycm = 1
    " }}}
endif
" }}}
" --- clang_complete engine {{{
if exists('g:ludwig_load_clangcomplete') && g:ludwig_load_clangcomplete
    " clang_complete - use clang for completing C/C++ code {{{
    " Obsoleted by YouCompleteMe?
    " http://www.vim.org/scripts/script.php?script_id=3302
    " https://github.com/Rip-Rip/clang_complete
    NeoBundle 'Rip-Rip/clang_complete'
    let s:ludwig_loaded_clangcomplete = 1
    " }}}
    " SuperTab - Do all your insert-mode completion with Tab {{{
    " http://www.vim.org/scripts/script.php?script_id=1643
    " https://github.com/ervandew/supertab
    NeoBundle 'ervandew/supertab'
    " }}}
    " syntastic - Syntax checking hacks for vim {{{
    " https://github.com/scrooloose/syntastic
    NeoBundle 'scrooloose/syntastic'
    let s:ludwig_loaded_syntastic = 1
    " }}}
    " UltiSnips - The ultimate snippet solution for Vim {{{
    " https://github.com/SirVer/ultisnips
    NeoBundle 'SirVer/ultisnips'
    NeoBundle 'honza/vim-snippets'
    let s:ludwig_loaded_ultisnips = 1
    " }}}
endif
" }}}
" --- neocomplete engine {{{
if exists('g:ludwig_load_neocomplete') && g:ludwig_load_neocomplete
    " neocomplete.vim - Next generation completion framework after neocomplcache {{{
    " https://github.com/Shougo/neocomplete.vim
    " This needs lua support!
    "   $ brew install vim --with-lua --HEAD
    "   $ brew install macvim --with-cscope --with-lua --HEAD
    if has('lua')
        NeoBundle 'Shougo/neocomplete'
        let s:ludwig_loaded_neocomplete = 1
    endif
    " }}}
    " neosnippet.vim -- neo-snippet plugin contains neocomplcache snippets source {{{
    " https://github.com/Shougo/neosnippet.vim
    NeoBundle 'Shougo/neosnippet'
    NeoBundle 'Shougo/neosnippet-snippets'
    let s:ludwig_loaded_neosnippet = 1
    " }}}
    " syntastic - Syntax checking hacks for vim {{{
    " https://github.com/scrooloose/syntastic
    NeoBundle 'scrooloose/syntastic'
    let s:ludwig_loaded_syntastic = 1
    " }}}
    " vim-marching - Async clang code completion {{{
    " https://github.com/osyo-manga/vim-marching
    NeoBundle 'osyo-manga/vim-marching'
    " }}}
endif
" }}}
" --- neocomplcache engine {{{
if exists('g:ludwig_load_neocomplcache') && g:ludwig_load_neocomplcache
j   " neocomplcache - Ultimate auto completion system for vim {{{
    " Obsoleted by YouCompleteMe?
    " http://www.vim.org/scripts/script.php?script_id=2620
    " https://github.com/Shougo/neocomplcache
    NeoBundle 'Shougo/neocomplcache'
    let s:ludwig_loaded_neocomplcache = 1
    " }}}
    " neosnippet.vim -- neo-snippet plugin contains neocomplcache snippets source {{{
    " https://github.com/Shougo/neosnippet.vim
    NeoBundle 'Shougo/neosnippet'
    NeoBundle 'Shougo/neosnippet-snippets'
    let s:ludwig_loaded_neosnippet = 1
    " }}}
    " syntastic - Syntax checking hacks for vim {{{
    " https://github.com/scrooloose/syntastic
    NeoBundle 'scrooloose/syntastic'
    let s:ludwig_loaded_syntastic = 1
    " }}}
endif
" }}}
" --- AutoComplPop engine {{{
if exists('g:ludwig_load_acp') && g:ludwig_load_acp
    " AutoComplPop - Automatically opens popup menu for completions {{{
    " Obsoleted by YouCompleteMe?
    " http://www.vim.org/scripts/script.php?script_id=1879
    " https://bitbucket.org/ns9tks/vim-autocomplpop/
    NeoBundle 'AutoComplPop'
    let s:ludwig_loaded_acp = 1
    " }}}
    " SuperTab - Do all your insert-mode completion with Tab {{{
    " http://www.vim.org/scripts/script.php?script_id=1643
    " https://github.com/ervandew/supertab
    NeoBundle 'ervandew/supertab'
    " }}}
    " UltiSnips - The ultimate snippet solution for Vim {{{
    " https://github.com/SirVer/ultisnips
    NeoBundle 'SirVer/ultisnips'
    NeoBundle 'honza/vim-snippets'
    let s:ludwig_loaded_ultisnips = 1
    " }}}
    " syntastic - Syntax checking hacks for vim {{{
    " https://github.com/scrooloose/syntastic
    NeoBundle 'scrooloose/syntastic'
    let s:ludwig_loaded_syntastic = 1
    " }}}
endif
" }}}

" Load my own scripts
" https://github.com/ludwig/vim-scripts
NeoBundle 'ludwig/vim-scripts'

" Finalize neobundle.vim {{{

" Required!
call neobundle#end()
filetype plugin indent on

" Installation check.
" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

" }}}

" }}}

" Load my default vim settings and mappings
source ~/.vim/defaults.vim

" Configure bundles {{{
" --- a.vim settings {{{

" Load alternate file (swap between header and implementation).
" Can also use CTRL-^ for this.
"nmap <silent> <leader>a :A<CR>

" By default, a.vim alternates to a file that does not exist (default 0)
let g:alternateNoDefaultAlternate = 1

" Change a.vim's default search path
"let g:alternateSearchPath = 'sfr:../inc,sfr:../include,sfr:./include,sfr:../src,sfr:./src,sfr:../source'

" By default a.vim does not convert filename to one relative to the current working directory. (default 0)
let g:alternateRelativeFiles = 1

" Set up alternates for Objective-C source files: .m, .mm -> .h
let g:alternateExtensions_m = "h"
let g:alternateExtensions_mm = "h"

" Add Obj-C extensions to the usual C/C++ alternates for .h
let g:alternateExtensions_h = "c,cc,cpp,cxx,m,mm"

" Set up alternates for C/C++: .hh <--> .cc
let g:alternateExtensions_cc = "h,hh"
let g:alternateExtensions_hh = "cc"

" }}}
" --- Ack settings {{{

cabbrev ack Ack

" Search for a pattern using Ack (the trailing space is important)
nnoremap ,s :Ack! 
nnoremap ,S :Ack! <C-R>=expand("<cword>")<CR>

" Same, but use the location list window instead of the quickfix list window
nnoremap \s :LAck! 
nnoremap \S :LAck! <C-R>=expand("<cword>")<CR>

" }}}
" --- BufExplorer settings {{{

" To use:
"   '<Leader>be'  normal open
"   '<Leader>bs'  horizontal split open
"   '<Leader>bv'  vertical split open

" XXX: figure out how to disable the mappings starting with ,
"nmap <silent> <unique> \be :BufExplorer<CR>
"nmap <silent> <unique> \bs :BufExplorerHorizontalSplit<CR>
"nmap <silent> <unique> \bv :BufExplorerVerticalSplit<CR>

let g:bufExplorerDefaultHelp=0
"let g:bufExplorerDetailedHelp=1
let g:bufExplorerFindActive=0
let g:bufExplorerShowUnlisted=0
"let g:bufExplorerSortBy='mru'
let g:bufExplorerSplitBelow=1
let g:bufExplorerSplitOutPathName=1
let g:bufExplorerSplitRight=1

" }}}
" --- colorv.vim settings {{{
" See ':help colorv' for details.
" Use with <Leader>ce

" The leader for colorv's global mapping (default is '<Leader>c')
let g:colorv_global_leader = '\c'

" Alternatively, don't define any global mapping (default 0 -- global mapping is defined)
let g:colorv_no_global_map = 0

" }}}
" --- closetag.vim settings {{{
" http://mirnazim.org/writings/vim-plugins-i-use/
autocmd filetype html,htmldjango,jinjahtml,eruby,mako let b:closetag_html_style = 1
"autocmd filetype html,xml,xsl source ~/.vim/bundle/closetag.vim/plugin/closetag.vim
" }}}
" --- Command-T settings {{{

" To setup this plugin after installation:
"   $ cd ~/.vim/bundle/command-t/ruby/command-t
"   $ ruby extconf.rb
"   $ make

" Use '\t' to run :CommandT<CR>
nnoremap <silent> \t :CommandT<CR>

" Use '\b' to run :CommandTBuffer<CR>
nnoremap <silent> \b :CommandTBuffer<CR>

" Also use CTRL-B and CTRL-G
nnoremap <silent> <C-B> :CommandTBuffer<CR>
nnoremap <silent> <C-G> :CommandT<CR>

" }}}
" --- EasyMotion settings {{{

" Use with \\{motion-command} such as \\w, \\f, etc.
let g:EasyMotion_leader_key = '\\'
nmap ,f \\f
nmap ,F \\F

" }}}
" --- emmet-vim settings {{{
" To expand the html code, use '<C-y>,'
" http://docs.emmet.io/
" https://github.com/mattn/emmet-vim

" enable just for html/css
let g:user_emmet_install_global = 0
autocmd filetype html,css EmmetInstall

" redefine trigger key (default is <C-y>)
let g:user_emmet_leader_key = '<C-y>'

" complete tags using omnifunc
let g:use_emmet_complete_tag = 1

" Expand emmet expression with Tab key (like in Sublime Text)
" https://github.com/mattn/emmet-vim/issues/168
" http://bling.github.io/blog/2013/07/21/smart-tab-expansions-in-vim-with-expression-mappings/
" XXX: get this working later

" }}}
" --- LustyJuggler settings {{{

" Disable LustyJuggler warning (default vim not built with ruby)
"let g:LustyJugglerSuppressRubyWarning = 1

" Set up own mappings (default mapping ,lj is slow because of existing ,l mapping)
let g:LustyJugglerDefaultMappings = 0
nmap <silent> <leader>j :LustyJuggler<CR>
nmap <silent> <leader>k :LustyJugglePrevious<CR>

" Display the key with the name of the buffer ('a' for alpha chars, 1 for digits)
let g:LustyJugglerShowKeys = 'a'

" }}}
" --- MRU settings {{{

" Open list of most recently used files with ':MRU' or ',m'
nmap <silent> <Leader>m :MRU<CR>

" }}}
" --- NERDTree settings {{{

" Toggle the NERD Tree
nmap <silent> <Leader>n :NERDTreeToggle<CR>

" Store the bookmarks
let NERDTreeBookmarksFile=expand("$HOME/.vim/tmp/NERDTreeBookmarks")

" Show the bookmarks table on startup?
let NERDTreeShowBookmarks=0

" Show hidden files?
let NERDTreeShowFiles=1
let NERDTreeShowHidden=1

" Quit on opening files from the tree?
let NERDTreeQuitOnOpen=0

" Highlight the selected entry in the tree?
let NERDTreeHighlightCursorline=0

" 1 - Double click to open nodes
" 2 - Single click to open directories, and double click to open files
" 3 - Single click to open nodes
let NERDTreeMouseMode=3

" Don't display these kinds of files
let NERDTreeIgnore=[
    \ '\.pyc$', '\.pyo$', '\.pyd$', '\.egg$',
    \ '\.class$', '\.beam$', '\.obj$', '\.o$', '\.so$', '\.a$',
    \ '^\.git$', '^\.svn$'
    \ ]

" Default key to activate node is 'o'
let NERDTreeMapActivateNode='<Space>'

" }}}
" --- NERDCommenter settings {{{

" Mappings
"   ',cu'   uncomments
"   ',cc'   comments out lines
"   ',cl'   aligns delimiters on left
"   ',cb'   aligns delimiters on right
"   ',cs'   uses sexy delimiters

let NERDCommentWholeLinesInVMode=2

let NERDSpaceDelims=0

" }}}
" --- session.vim settings {{{

" Commands are :SaveSession / :OpenSession / :DeleteSession / :ViewSession

" See ':help session' for more options.
"let g:session_directory = '~/tmp'
let g:session_autoload = 'no'
let g:session_autosave = 'yes'
let g:session_default_to_last = 1
let g:session_command_aliases = 1

" }}}
" --- scratch.vim settings {{{
cabbrev scratch Scratch
cabbrev sscratch Sscratch
nmap <leader><tab> :Sscratch<CR><C-w>x<C-w><C-j>i
" }}}
" --- tabman.vim settings {{{
" To use tabman, use commands ':TMToggle' and ':TMFocus'
" set to 1 to disable
let g:loaded_tabman = 0
" lots of other settings (see ':help tabman-options')
let g:tabman_toggle = '\mt'
let g:tabman_focus = '\mf'
let g:tabman_width = 25
let g:tabman_side = 'left'
let g:tabman_specials = 0
let g:tabman_number = 1
" }}}
" --- Tagbar settings {{{

" Toggle Tagbar with ',t'
nmap <silent> <Leader>t :TagbarToggle<CR>

let g:tagbar_left = 0
let g:tagbar_width = 40
let g:tagbar_sort = 0
let g:tagbar_compact = 1
let g:tagbar_singleclick = 1
let g:tagbar_foldlevel = 99
let g:tagbar_iconchars = ['â–¾', 'â–¸']

if filereadable(expand('~/bin/ctags'))
    let g:tagbar_ctags_bin = expand('~/bin/ctags')
endif

" }}}
" --- TagList settings {{{

" Toggle TagList with ',T'
nmap <silent> <leader>T :TlistToggle<CR>

let Tlist_Exit_OnlyWindow=1         " quit when TagList is the last open window
let Tlist_GainFocus_On_ToggleOpen=1 " put focus on the TagList window when it opens
"let Tlist_Process_File_Always=1     " process files in the background, even when the TagList window isn't open
"let Tlist_Show_One_File=1           " only show tags from the current buffer, not all open buffers
let Tlist_WinWidth=40               " set the width
let Tlist_Inc_Winwidth=1            " increase window by 1 when growing

" shorten the time it takes to highlight the current tag (default is 4 secs)
" note that this setting influences Vim's behaviour when saving swap files
"set updatetime=1000

" the default ctags in /usr/bin on the Mac is GNU ctags, so change it to the
" exuberant ctags version in /usr/local/bin
let Tlist_Ctags_Cmd = '/usr/local/bin/ctags'

" show function/method prototypes in the list
let Tlist_Display_Prototype=1

" don't show scope info
let Tlist_Display_Tag_Scope=0

" show TagList window on the right
let Tlist_Use_Right_Window=1

" }}}
" --- Unite.vim settings {{{
" Unite
" https://github.com/Shougo/unite.vim
" http://www.codeography.com/2013/06/17/replacing-all-the-things-with-unite-vim.html
" http://bling.github.io/blog/2013/06/02/unite-dot-vim-the-plugin-you-didnt-know-you-need/

" Enable unit-source-history/yank (not defined by default)
let g:unite_source_history_yank_enable = 1

" Directory for storing unite.vim configurations
"let g:unite_data_directory = expand('~/.cache/unite')

call unite#filters#matcher_default#use(['matcher_fuzzy'])
nnoremap \t :<C-u>Unite -no-split -buffer-name=files   -start-insert file_rec/async:!<cr>
nnoremap \f :<C-u>Unite -no-split -buffer-name=files   -start-insert file<cr>
nnoremap \r :<C-u>Unite -no-split -buffer-name=mru     -start-insert file_mru<cr>
"nnoremap \o :<C-u>Unite -no-split -buffer-name=outline -start-insert outline<cr>
nnoremap \y :<C-u>Unite -no-split -buffer-name=yank    history/yank<cr>
nnoremap \e :<C-u>Unite -no-split -buffer-name=buffer  buffer<cr>

" Custom mappings for the unite buffer
autocmd FileType unite call s:unite_settings()
function! s:unite_settings()
  " Play nice with supertab
  let b:SuperTabDisabled=1
  " Enable navigation with control-j and control-k in insert mode
  imap <buffer> <C-j>   <Plug>(unite_select_next_line)
  imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
endfunction

" }}}
" --- vim-indent-guides {{{
" Use this with ':IndentGuidesToggle' or with '<Leader>ig' if mapping is set
" For more details see ':h indent-guides'
let g:indent_guides_start_level = 2
let g:indent_guides_enable_on_vim_startup = 0
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']
let g:indent_guides_default_mapping = 1
" }}}
" --- vim-json settings {{{
" Disable the vim conceal feature for the json syntax highlighting
let g:vim_json_syntax_conceal = 0
" }}}
" --- vim-go settings {{{
let g:go_fmt_autosave = 0
" }}}
" --- Yggdroot/indentLine {{{
" Use ':help indentline' to see full list of options

" enable indentLine by default?
let g:indentLine_enabled = 1

" Specify a character to be used as indent line (default '|')
" You can also use one of Â¦, â”†, ï¸™ or â”‚
let g:indentLine_char = '|'

" Disable plugin for these filetypes (default is [])
let g:indentLine_fileTypeExclude = ['help']

" }}}
" }}}

" Configure the conditional bundles (some of these may conflict with each other) {{{
" --- AutoComplPop settings {{{
if exists('s:ludwig_loaded_acp')
    " https://github.com/vim-scripts/AutoComplPop/blob/master/doc/acp.txt
    " See options with ':help acp'

    " if nonzero, auto-popup is enabled at startup (default 1)
    let g:acp_enableAtStartup = 1

    " Value set to 'ignorecase' temporarily when auto-popup (default 1)
    let g:acp_ignorecaseOption = 1

    " Value set to 'complete' temporarily when auto-popup (default '.,w,b,k')
    "let g:acp_completeOption = &complete
    let g:acp_completeOption = '.,w,b,u,t,i,k'

    " if nonzero, avoid auto-popup by moving cursor in Insert mode (default 0)
    let g:acp_mappingDriven = 1

    " command for keyword completion (default "\<C-n>")
    let g:acp_behaviorKeywordCommand = "\<C-n>"

    " keyword chars needed to attempt keyword completion (default 2)
    " if negative, completion is never attempted
    let g:acp_behaviorKeywordLength = 1

    " keyword chars needed to attempt python omni-completion (default 0)
    let g:acp_behaviorPythonOmniLength = 0

    " keyword chars needed to attempt HTML omni-completion (default 0)
    let g:acp_behaviorHtmlOmniLength = 0

    " keyword chars needed to attempt CSS omni-completion for properties
    let g:acp_behaviorCssOmniPropertyLength = 1

    " Let the space character close acp's popup-menu (finally fixed!)
    inoremap <expr><Space>  pumvisible() ? "\<Esc>i\<Space>" : "\<Space>"

endif
" }}}
" --- clang_complete settings {{{
if exists('s:ludwig_loaded_clangcomplete')
    " clang_complete - Vim plugin that uses clang for completing C/C++ code.
    " http://www.vim.org/scripts/script.php?script_id=3302
    " https://github.com/Rip-Rip/clang_complete
    "
    " You can use <C-x><C-u> to 'force' a completion
    " You can add special flags to a file called '.clang_complete' at the root of your project.
    "

    " Fix the library path for clang_complete (put this line in user.vim instead)
    "let g:clang_library_path='/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/'

    " Instead of calling clang/clang++ tool use libclang directly
    let g:clang_use_library = 1

    " select first entry in menu? (default 0)
    let g:clang_auto_select = 0

    " automatically complete after '-> . ::' (default 1)
    let g:clang_complete_auto = 1

    " if clang should complete preprocessor macros and constants
    let g:clang_complete_macros = 1

    " open quickfix window on error (default 0)
    let g:clang_complete_copen = 1

    " highlight warnings and errors (default 1)
    let g:clang_hl_errors = 1

    " periodically update the quickfix window (default 0)
    let g:clang_periodic_quickfix = 1

    " snippets engine (clang_complete, snipmate, ultisnips, ...)
    let g:clang_snippets = 1
    let g:clang_snippets_engine = 'clang_complete'
    if exists('s:ludwig_loaded_ultisnips')
        let g:clang_snippets_engine = 'ultisnips'
    endif

    " use vim's conceal feature to hide the snippet holders
    if has('conceal')
        let g:clang_conceal_snippets = 1
        set conceallevel=2 concealcursor+=inv
    endif

    " automatically close preview window after completion (default 0)
    let g:clang_close_preview = 0

    " additional compilation arguments passed to libclang (default '')
    "let g:clang_user_options = '-std=c++11'

    " complete preprocessor macros and constants (default 0)
    let g:clang_complete_macros = 0

    " complete code patterns, i.e. loop constructs etc (default 0)
    let g:clang_complete_patterns = 0

    " let clang_complete set default keymappings (default 1)
    let g:clang_make_default_keymappings = 1

endif
" }}}
" --- neocomplcache settings {{{
if exists('s:ludwig_loaded_neocomplcache')

    " Disable AutoComplPop
    let g:acp_enableAtStartup = 0

    " enable at startup (default 0).
    " can also enable with :NeoComplCacheEnable command.
    let g:neocomplcache_enable_at_startup = 0

    " number of candidates to display (default 100)
    let g:neocomplcache_max_list = 100

    " indication width of candidats (default 50)
    let g:neocomplcache_max_keyword_width = 50

    " number of input completion (default 2)
    let g:neocomplcache_auto_completion_start_length = 2

    " use smartcase
    let g:neocomplcache_enable_smart_case = 1

    " close popup and save indent on <CR>
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
        return neocomplcache#smart_close_popup() . "\<CR>"
    endfunction

    " define two commands that have easier tab completion
    command! EnableNeoComplCache :NeoComplCacheEnable
    command! DisableNeoComplCache :NeoComplCacheDisable

endif
" }}}
" --- neocomplete settings {{{
if exists('s:ludwig_loaded_neocomplete')
    " See https://github.com/Shougo/neocomplete.vim#configuration-examples

    " Disable AutoComplPop
    let g:acp_enableAtStartup = 0

    " Use neocomplete
    let g:neocomplete#enable_at_startup = 1

    " Use smartcase
    let g:neocomplete#enable_smart_case = 1

    " Set minimum syntax keyword length
    let g:neocomplete#sources#syntax#min_keyword_length = 3
    let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

    " Define dictionary
    let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default' : '',
        \ 'vimshell' : $HOME.'/.vimshell_hist',
        \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

    " Define keyword
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    " Plugin key-mappings
    inoremap <expr><C-g>    neocomplete#undo_completion()
    inoremap <expr><C-l>    neocomplete#complete_common_string()

    " Recommended key-mappings
    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
        return neocomplete#close_popup() . "\<CR>"
        " For no inserting <CR> key
        "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
    endfunction

    " <TAB>: completion
    inoremap <expr><TAB>    pumvisible() ? "\<C-n>" : "\<TAB>"

    " <C-h>, <BS>: close popup and delete backword char
    inoremap <expr><C-h>    neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS>     neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><C-y>    neocomplete#smart_close_popup()
    inoremap <expr><C-e>    neocomplete#smart_close_popup()

    " Close popup by <Space>
    inoremap <expr><Space>  pumvisible() ? neocomplete#close_popup()."\<Space>" : "\<Space>"

    " Enable omni completion (already in defaults.vim)
    "autocmd filetype css setlocal omnifunc=csscomplete#CompleteCSS
    "autocmd filetype html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    "autocmd filetype javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    "autocmd filetype python setlocal omnifunc=pythoncomplete#Complete
    "autocmd filetype xml setlocal omnifunc=xmlcomplete#CompleteTags

    " Enable heavy omni completion.
    if !exists('g:neocomplete#sources#omni#input_patterns')
        let g:neocomplete#sources#omni#input_patterns = {}
    endif
    let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
    let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
    let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

    " For perlomni.vim setting.
    " https://github.com/c9s/perlomni.vim
    "let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

    " Using with neocomplete?
    " http://stackoverflow.com/questions/12975098/using-neocomplcache-and-clang-complete
endif

" }}}
" --- neosnippet settings {{{
if exists('s:ludwig_loaded_neosnippet')
    " See https://github.com/Shougo/neosnippet.vim

    " Plugin key-mappings (<C-k> by default, then use <C-n> and <C-p> to navigate list)
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>     <Plug>(neosnippet_expand_target)

    " SuperTab-like snippets behavior
    imap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

    " For snippet_complete marker
    if has('conceal')
        set conceallevel=2 concealcursor+=i
    endif
endif
" }}}
" --- syntastic settings {{{
if exists('s:ludwig_loaded_syntastic')
    " Syntax checks are run every time file is saved.
    " Remember to only load syntastic when YouCompleteMe is not loaded!
    " https://github.com/scrooloose/syntastic
    " http://blog.thomasupton.com/2012/05/syntastic/
    "
    " See ':help syntastic' for options
    " Use ':Errors' to see the list of errors
    "

    " Do syntax check on open (default 0)
    let g:syntastic_check_on_open = 0

    " Do syntax checks on :wq (default 1)
    let g:syntastic_check_on_wq = 0

    " Run all checkers that apply to current filetype (default 0)
    let g:syntastic_aggregate_errors = 1

    " Use custom syntastic symbols (defaults are '>>' and 'S>')
    let g:syntastic_enable_signs = 1
    let g:syntastic_error_symbol = "âœ—"
    let g:syntastic_style_error_symbol =  "Sâœ—"
    let g:syntastic_warning_symbol = "âš "
    let g:syntastic_style_warning_symbol = "Sâš "

    " Always place detected errors into location list (default 0)
    let g:syntastic_always_populate_loc_list = 1

    " Autojump to first error? (0 to disable, 1 to jump to first issue, 2 to jump to first error)
    let g:syntastic_auto_jump = 2

    " Automatically open location list? (default 2)
    " (0 won't open or close, 1 auto open with errors, 2 auto close if no errors)
    let g:syntastic_auto_loc_list = 1

    " Height of location list (default 10)
    let g:syntastic_loc_list_height = 10

    " Fine tune when automatic syntax checking is done (or not done)
    " Passive checking happens only when user calls ':SyntasticCheck'
    let g:syntastic_mode_map = {
        \ 'mode': 'active',
        \ 'active_filetypes': [],
        \ 'passive_filetypes': []
        \ }

    " Use flake8 for python
    " http://pep8.readthedocs.org/en/latest/intro.html#error-codes
    let g:syntastic_python_checkers = ['flake8']
    let g:syntastic_python_flake8_args = '--ignore="E501,E302,E261,E701,E241,E126,E127,E128,W801"'

endif
" }}}
" --- UltiSnips settings {{{
if exists('s:ludwig_loaded_ultisnips')
    " https://github.com/SirVer/ultisnips
    " http://vimcasts.org/episodes/meet-ultisnips/
    " http://stackoverflow.com/questions/14896327/ultisnips-and-youcompleteme

    " If you want ':UltiSnipsEdit' to split your window
    let g:UltiSnipsEditSplit = "vertical"

    " make YCM compatible with UltiSnips (using supertab)
    if exists('s:ludwig_loaded_ycm')
        let g:ycm_key_list_select_completion = ['<C-n>', '<C-j>', '<Down>']
        let g:ycm_key_list_previous_completion = ['<C-p>', '<C-k>', '<Up>']
    endif
    let g:SuperTabDefaultCompletionType = '<C-n>'

    " better key bindings for UltiSnipsExpandTrigger
    " (defaults are <tab>, <c-tab>, <c-j>, <c-k>)
    let g:UltiSnipsExpandTrigger = "<Tab>"
    let g:UltiSnipsListSnippets = "<C-l>"
    let g:UltiSnipsJumpForwardTrigger = "<Tab>"
    let g:UltiSnipsJumpBackwardTrigger = "<S-Tab>"

endif
" }}}
" --- vim-marching settings {{{
if exists('s:ludwig_loaded_neocomplete')
    " Refer to ':help marching'
    " https://github.com/osyo-manga/vim-marching
    " https://github.com/osyo-manga/vim-marching/blob/master/doc/marching.txt

    " path to clang command
    let g:marching_clang_command = 'clang'

    " filetype=cpp
    let g:marching#clang_command#options = {
    \   'cpp' : '-std=c++11'
    \ }

    " directory paths to include
    let g:marching_include_paths = [
    \   '/usr/local/include',
    \   $HOME.'/opt/local/include'
    \ ]

    " cooperate with neocomplete.vim
    let g:marching_enable_neocomplete = 1

    if !exists('g:neocomplete#force_omni_input_patterns')
        let g:neocomplete#force_omni_input_patterns = {}
    endif

    let g:neocomplete#force_omni_input_patterns.cpp =
        \ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'

    set updatetime=200
    imap <buffer> <C-x><C-o> <Plug>(marching_start_omni_complete)
    imap <buffer> <C-x><C-x><C-o> <Plug>(marching_force_start_omni_complete)

    " This variable controls the process of completion (async vs. sync)
    let g:marching_backend = "clang_command"

endif
" }}}
" --- YouCompleteMe settings {{{
if exists('s:ludwig_loaded_ycm')
    " YouCompleteMe
    " http://valloric.github.io/YouCompleteMe/

    " How many chars for identifier-based completion (default 2)
    " Use a high value to effectively disable it (leaving only the semantic engine).
    let g:ycm_min_num_of_chars_for_completion = 1

    " Auto-trigger completion (default 1)
    " Can still trigger pop with '<C-Space>'.
    let g:ycm_auto_trigger = 1

    " Whitelist of vim filetypes (default is {'*':1})
    let g:ycm_filetype_whitelist = { '*': 1 }

    " Diagnostic stuff
    let g:ycm_show_diagnostics_ui = 1
    let g:ycm_enable_diagnostic_signs = 1
    let g:ycm_enable_diagnostic_highlighting = 1
    let g:ycm_echo_current_diagnostic = 1

    " Diagnostic signs for errors/warnings (default symbol is '>>')
    let g:ycm_error_symbol = 'âœ—'
    let g:ycm_warning_symbol = 'âš '

    " Automatically populate location list with diagnostic data (default 0)
    let g:ycm_always_populate_location_list = 1

    " Automatically open location list when running ':YcmDiags'
    let g:ycm_open_loclist_on_ycm_diags = 1

    " Show completion menu inside comments and strings? (defaults are 0 and 1)
    let g:ycm_complete_in_comments = 1
    let g:ycm_complete_in_strings = 1

    " Key mappings for selecting first completion string. 
    " NOTE: See settings for UltiSnips for the compatibility values.
    " Defaults shown in comment below.
    "let g:ycm_key_list_select_completion = ['<TAB>', '<Down>']
    "let g:ycm_key_list_previous_completion = ['<S-TAB>', '<Up>']

    " Key mapping to invoke the completion menu for semantic completion (default is '<C-Space>')
    let g:ycm_key_invoke_completion = '<C-Space>'

    " Calls ':YcmShowDetailedDiagnostic' on given line
    let g:ycm_key_detailed_diagnostics = '\d'

    " Disabling this will requery omnicompletion engine on every keypress (default 1)
    let g:ycm_cache_omnifunc = 0

    " By default, YCM queries UltiSnips plugin for possible completions of snippet triggers.
    let g:ycm_use_ultisnips_completer = 1

    " Collect identifiers from string and comments (default 0)
    let g:ycm_collect_identifiers_from_comments_and_strings = 0

    " Collect identifiers from tag files (default 0)
    let g:ycm_collect_identifiers_from_tags_files = 1

    " Seed the identifier database with keywords for the programming language (default 0)
    let g:ycm_seed_identifiers_with_syntax = 1

    " Options related to the preview window
    let g:ycm_add_preview_to_completeopt = 1
    let g:ycm_autoclose_preview_window_after_completion = 0
    let g:ycm_autoclose_preview_window_after_insertion = 1

    " Specify fallback .ycm_extra_conf.py file for compilation flags
    " http://www.alexeyshmalko.com/2014/youcompleteme-ultimate-autocomplete-plugin-for-vim/
    " https://github.com/rasendubi/dotfiles/blob/master/.vim/.ycm_extra_conf.py
    let g:ycm_global_ycm_extra_conf = "~/.vim/.ycm_extra_conf.py"

    " Pass extra data to the 'FlagsForFile' function in .ycm_extra_conf.py
    let g:ycm_extra_conf_vim_data = ['&filetype']

    " Avoid executing potentially malicious files (default 1)
    let g:ycm_confirm_extra_conf = 1
    let g:ycm_extra_conf_globlist = ['~/*', '!/*']

endif
" }}}
" }}}

" Lastly, load ~/.vim/user.vim if it exists. We don't keep this file in the
" repository so that it can be used for loading host-specific settings.
if filereadable(expand('~/.vim/user.vim'))
    source ~/.vim/user.vim
endif

" vim: fdm=marker fdl=1 tw=100
