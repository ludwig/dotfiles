# ~/.tmux.conf
#
# You will need the following to use this ~/.tmux.conf file on OS X
#
#   brew install reattach-to-user-namespace
#
# See the following files:
#
#   /opt/local/share/doc/tmux/t-williams.conf
#   /opt/local/share/doc/tmux/screen-keys.conf
#   /opt/local/share/doc/tmux/vim-keys.conf
#
# URLs to read:
#
#   http://blog.yjl.im/2009/11/migrating-to-tmux-from-gnuscreen.html
#   http://blog.hawkhost.com/2010/06/28/tmux-the-terminal-multiplexer/
#   http://blog.hawkhost.com/2010/07/02/tmux-%E2%80%93-the-terminal-multiplexer-part-2/
#   http://www.dayid.org/os/notes/tm.html
#
# Other sample tmux.conf files
#
#   http://www.mindfuzz.net/?p=178
#
# -----------------------------------------------------------------------------


# Global settings {{{

# Set prefix key to Ctrl-a
unbind-key C-b
set-option -g prefix C-a

# send the prefix to client inside window
bind-key C-a send-prefix

# toggle last window like screen
bind-key C-a last-window

# default command (used for new windows)
# https://robots.thoughtbot.com/how-to-copy-and-paste-with-tmux-on-mac-os-x
# https://robots.thoughtbot.com/tmux-copy-paste-on-os-x-a-better-future
set-option -g default-command "tmux rename-window bash; reattach-to-user-namespace -l bash"

# default shell
set -g default-shell /usr/local/bin/bash

# scrollback buffer n lines
set -g history-limit 5000

# change the key binding repeat-time (default is 500)
set -g repeat-time 1000

# change the display time for on-screen indicators (default is empty)
set -g display-time 500

# listen for activity on all windows
set -g bell-action any
#set -g bell-action none

# quiet mode (enables/disables display of various informational messages)
set -g quiet on

# start window indexing at zero (default)
set -g base-index 0

# tell tmux to use 256 colour terminal
set -g default-terminal "screen-256color"

# xterm-style function key sequences
setw -g xterm-keys on

# control automatic window renaming
setw -g automatic-rename off

# enable wm window titles
set -g set-titles on

# wm window title string (uses statusbar variables)
#set -g set-titles-string "tmux.#I.#W"

# don't close windows. just deactivate them. use respawn-window to reactivate.
#setw -g remain-on-exit on

# enable mouse support
set -g mouse on

# vi-style controls for copy mode
setw -g mode-keys vi

# }}}
# Key bindings {{{

# reload settings
bind-key R source-file ~/.tmux.conf

# detach client
bind-key d detach
bind-key C-d detach

# choose a client to detach
bind-key D choose-client

# switch to prev/next client
bind-key -r ( switch-client -p
bind-key -r ) switch-client -n
bind-key n switch-client -n
bind-key p switch-client -p

# choose window/session
bind-key "'" choose-window
bind-key '"' choose-session

# display visible indicator of each pane
bind-key w display-panes

# Cycle to next pane
bind-key -r Tab select-pane -t :.+

# Navigate panes using jkhl (no prefix)
bind-key j select-pane -D
bind-key k select-pane -U
bind-key h select-pane -L
bind-key l select-pane -R
bind-key C-j select-pane -D
bind-key C-k select-pane -U
bind-key C-h select-pane -L
bind-key C-l select-pane -R

# swap panes
bind-key -r J swap-pane -D
bind-key -r K swap-pane -U
bind-key -r { swap-pane -U
bind-key -r } swap-pane -D

# kill current pane/window
bind-key q confirm-before kill-pane
bind-key Q confirm-before kill-window
bind-key C-q confirm-before kill-pane
#bind-key x kill-pane
#bind-key X kill-window

# window layouts (emacs-like)
#bind-key 1 break-pane
#bind-key 2 select-layout even-vertical
#bind-key 3 select-layout even-horizontal
#bind-key o select-pane -U

# specific window layouts
#bind o select-layout "active-only"
#bind O select-layout "main-vertical"

# cycle to the next pane layout (default key is 'Space')
bind -r y next-layout

# open a man page in new window
bind-key / command-prompt -p "man page for:" "split-window 'exec man %%'"

# quick view of processes
bind-key "~" split-window "exec htop"

# do these commands need a key binding?
#bind-key XYZ list-sessions
#bind-key XYZ list-windows
#bind-key XYZ list-panes
#bind-key XYZ show-window-options -g
#bind-key XYZ show-messages -g
#bind-key XYZ show-environment -g

# lists all key bindings (default key is '?')
bind-key ? list-keys

# list the syntax of all tmux commands
bind-key m list-commands

# show the global options
bind-key , show-options -g

# show the global window options
bind-key . show-window-options -g

# copying and pasting
bind-key [ copy-mode
bind-key ] paste-buffer

# list all paste buffers (default key is '#')
bind-key b list-buffers

# choose buffer to paste interactively (default key is '=')
bind-key v choose-buffer

# delete the most recently copied buffer of text (default key is '-')
bind-key x delete-buffer

# Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of 'Enter' to also use copy-pipe
unbind -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

# }}}
# Screen-like key bindings {{{

# new window
bind-key C-c new-window
bind-key c new-window

# next window (default key in tmux is 'n')
bind-key Space next-window
bind-key -r "C-Space" next-window

# prev window
bind-key BSpace previous-window

# title (default key in tmux is ',')
bind-key A command-prompt "rename-window %%"

# quit
bind-key \ confirm-before kill-server

# displays clients attached to the server
bind-key * list-clients

# redisplay (default key in tmux is 'r')
#bind-key C-l refresh-client
#bind-key l refresh-client
bind-key r refresh-client

# }}}
# Split windows like vim {{{

# vim's definition of a horizontal/vertical split is reversed from tmux's
#bind-key v split-window -h
#bind-key s split-window -v

# alternatively, use better mnemonics for horizontal/vertical splits
bind-key | split-window -h -c "#{pane_current_path}"
bind-key - split-window -v -c "#{pane_current_path}"
bind-key _ split-window -v -c "#{pane_current_path}"

# resize panes like vim
bind-key -r < resize-pane -L 3
bind-key -r > resize-pane -R 3
bind-key -r + resize-pane -U 3
bind-key -r = resize-pane -D 3

# }}}
# Statusbar settings {{{

# toggle statusbar
bind-key s set status

# use vi-style key bindings in the status line
set -g status-keys vi

# amount of time for which status line messages and other indicators
# are displayed. time is in milliseconds.
set -g display-time 2000

# default statusbar colors
set -g status-fg white
set -g status-bg default
set -g status-attr default

# default window title colors
setw -g window-status-fg white
setw -g window-status-bg default
setw -g window-status-attr dim

# active window title colors
setw -g window-status-current-fg cyan
setw -g window-status-current-bg default
#setw -g window-status-current-attr bright
setw -g window-status-current-attr underscore

# command/message line colors
set -g message-fg white
set -g message-bg black
set -g message-attr bright

# }}}
# Session initialization {{{

#
# We shall leave this section disabled (commented out) because we can't easily
# re-source this config file (~/.tmux.conf) without creating more sessions/windows
# every time we do so.
#
# For what it's worth, if you do decide to initialize a few sessions here, you
# should start tmux with the command "tmux attach-session -t0". Running tmux
# by itself will always create a new session.
#

# first session
#new-session -d -s0
#new-window -d
#new-window -d
#new-window -d

# second session
#new-session -d -s1
#new-window -d
#new-window -d

# }}}
# -----------------------------------------------------------------------------
# vim: fen fdl=0 fdm=marker
